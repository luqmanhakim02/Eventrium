#pragma version 6

// Handle application creation
txn ApplicationID
int 0
==
txn TypeEnum
int appl
==
&&
bnz handle_create

// Handle application call
txn ApplicationID
int 0
==
bnz handle_call

// Handle event creation
handle_create:
    // Check if the call is authorized (sender is the creator)
    txn Sender
    byte "CPNL2EV5SCESLNFKLCBKJ4GNTUXADAWS7BVGRQA5EWYRHK3N6EJZHBHGSY"
    ==
    bnz authorized

    // Load the current event counter (global state)
    byte "event_counter" // Use a meaningful key
    app_global_get

    // Increment the event counter
    int 1
    +
    
    // Store the updated counter
    byte "event_counter"
    swap
    app_global_put

    // Create an event struct with event details
    byte "Event Name: "
    byte ""
    byte "Event Date: "
    byte ""
    byte "Event Price: "
    byte ""
    concat
    txn ApplicationID
    itob
    concat
    concat
    txn ApplicationID
    itob
    concat
    concat
    txn ApplicationID
    itob
    concat
    concat

    // Mark the call as successful
    int 1
    return

authorized:
    // Return 0 to indicate unauthorized call
    int 0
    return

// Handle event joining
handle_call:
    // Load event ID from the call data
    byte "Event ID: "
    concat
    txn ApplicationID
    itob
    concat
    byte "event_counter" // Use the same key as in handle_create
    app_global_get
    ==
    bnz event_exists

    // Event does not exist
    int 0
    return

event_exists:
    // Load event details from the application local state
    byte "Event Name: "
    app_local_get
    byte "Event Date: "
    app_local_get
    byte "Event Price: "
    app_local_get

    // Check if the payment amount is sufficient
    int 0
    txn Amount
    >=
    bnz payment_sufficient

    // Payment is insufficient
    int 0
    return

payment_sufficient:
    // Payment is sufficient, allow the user to join
    int 1
    return
